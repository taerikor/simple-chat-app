[{"/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/index.js":"1","/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/components/App.js":"2","/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/components/Router.js":"3","/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/routes/Home.js":"4","/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/routes/Auth.js":"5","/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/routes/Profile.js":"6","/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/fbase.js":"7","/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/components/Navigation.js":"8","/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/components/Tweet.js":"9","/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/components/TweetFactory.js":"10","/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/components/AuthForm.js":"11"},{"size":232,"mtime":1610637299098,"results":"12","hashOfConfig":"13"},{"size":1036,"mtime":1610637278687,"results":"14","hashOfConfig":"13"},{"size":1193,"mtime":1610637303472,"results":"15","hashOfConfig":"13"},{"size":903,"mtime":1610636659447,"results":"16","hashOfConfig":"13"},{"size":1281,"mtime":1610636659446,"results":"17","hashOfConfig":"13"},{"size":1559,"mtime":1610636659447,"results":"18","hashOfConfig":"13"},{"size":669,"mtime":1610636659445,"results":"19","hashOfConfig":"13"},{"size":1173,"mtime":1610637086652,"results":"20","hashOfConfig":"13"},{"size":2269,"mtime":1610636659444,"results":"21","hashOfConfig":"13"},{"size":2961,"mtime":1610636659444,"results":"22","hashOfConfig":"13"},{"size":1838,"mtime":1610636659442,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"146xmqe",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/index.js",[],["50","51"],"/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/components/App.js",[],"/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/components/Router.js",[],"/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/routes/Home.js",[],"/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/routes/Auth.js",[],"/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/routes/Profile.js",["52","53"],"import { authService, dbService } from 'fbase'\nimport React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nconst Profile = ({refreshUser,userObj}) => {\n    const history = useHistory()\n    const [newName,setNewName] = useState(userObj.displayName)\n    const onLogOutClick = () => {\n        authService.signOut()\n        history.push('/')\n}\n// const getMyTweets = async () => {\n//     const tweets = await dbService\n//       .collection(\"tweets\")\n//       .where(\"creatorId\", \"==\", userObj.uid)\n//       .orderBy(\"createAt\")\n//       .get();\n//     console.log(tweets.docs.map((doc) => doc.data()));\n//   };\n\n//   useEffect(() => {\n//     getMyTweets();\n//   }, []);\n\n    const onChange = (e) => {\n        const {target : {value}} = e\n        setNewName(value)\n    }\n    const onSubmit = async (e) => {\n        e.preventDefault();\n       if(userObj.displayName !== newName){\n           await userObj.updateProfile({\n               displayName:newName,\n           })\n           refreshUser();\n       }\n    }\n\nreturn(\n    <div className=\"container\">\n    <form onSubmit={onSubmit}>\n        <input onChange={onChange} value={newName} type='text' placeholder='Change Name' className=\"formInput\" autoFocus/>\n        <input   \n          type=\"submit\"\n          value=\"Update Profile\"\n          className=\"formBtn\"\n          style={{\n            marginTop: 10,\n          }}/>\n    </form>\n    <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n        Log Out\n      </span>\n    </div>\n) \n}\n\nexport default Profile;","/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/fbase.js",[],"/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/components/Navigation.js",[],"/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/components/Tweet.js",[],"/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/components/TweetFactory.js",["54"],"import { dbService, storageService } from 'fbase';\nimport React, { useState } from 'react'\nimport { v4 as uuidv4 } from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst TweetFactory = ({userObj}) => {\n    const[attachment, setAttachment] = useState('');\n    const[tweet,setTweet]=useState('');\n    const onSubmit = async (e) => {\n        if (tweet === \"\") {\n            return;\n          }\n        e.preventDefault();\n        let attachmentUrl = '';\n        if(attachment !== ''){\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\n            const response = await attachmentRef.putString(attachment, \"data_url\");\n                attachmentUrl = await response.ref.getDownloadURL();\n        }\n        const tweetObj = {\n            text:tweet,\n            createAt: Date.now(),\n             creatorId: userObj.uid,\n             attachmentUrl,\n        }\n        await dbService.collection('tweets').add(tweetObj);\n        setTweet('');\n        setAttachment('');\n        \n    }\n    const onChange = (e) => {\n        const {target:{value}} = e\n        setTweet(value)\n    }\n    const onFileChange = e => {\n        const {target:{files}} = e\n        const theFile = files[0]\n        const reader = new FileReader()\n        reader.onloadend = (finished) => {\n            const {currentTarget:{result}} = finished\n            setAttachment(result)\n        }\n        reader.readAsDataURL(theFile)\n    }\n\n    const onAttachmentClick = () => setAttachment('')\n    return (\n        <form onSubmit={onSubmit} className=\"factoryForm\">\n          <div className=\"factoryInput__container\">\n            <input\n              className=\"factoryInput__input\"\n              value={tweet}\n              onChange={onChange}\n              type=\"text\"\n              placeholder=\"What's on your mind?\"\n              maxLength={120}\n            />\n            <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n          </div>\n          <label for=\"attach-file\" className=\"factoryInput__label\">\n            <span>Add photos</span>\n            <FontAwesomeIcon icon={faPlus} />\n          </label>\n          <input\n            id=\"attach-file\"\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={onFileChange}\n            style={{\n              opacity: 0,\n            }}\n          />\n          {attachment && (\n            <div className=\"factoryForm__attachment\">\n              <img\n                src={attachment}\n                style={{\n                  backgroundImage: attachment,\n                }}\n              />\n              <div className=\"factoryForm__clear\" onClick={onAttachmentClick}>\n                <span>Remove</span>\n                <FontAwesomeIcon icon={faTimes} />\n              </div>\n            </div>\n          )}\n        </form>\n      );\n}\nexport default TweetFactory;","/Users/taerikim/Documents/web/Nomad Challenge/taewitter/src/components/AuthForm.js",[],["55","56"],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":1,"column":23,"nodeType":"63","messageId":"64","endLine":1,"endColumn":32},{"ruleId":"61","severity":1,"message":"65","line":2,"column":17,"nodeType":"63","messageId":"64","endLine":2,"endColumn":26},{"ruleId":"66","severity":1,"message":"67","line":76,"column":15,"nodeType":"68","endLine":81,"endColumn":17},{"ruleId":"57","replacedBy":"69"},{"ruleId":"59","replacedBy":"70"},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'dbService' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["71"],["72"],"no-global-assign","no-unsafe-negation"]